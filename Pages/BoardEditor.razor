@using HalmaEditor.Data
@using System.IO;
@inject BoardManager boardMgr

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon1">Input File Path</span>
    </div>
    <input type="text" class="form-control" placeholder="Path" @bind="boardMgr.FilePath" />
</div>

@if (warning != null)
{
    <div class="alert alert-danger">
        <strong>@warning</strong>
    </div>
}

<div class="row">
    <div class="col-sm-12">Synced with File: @boardMgr.LinkedFilePath</div>
</div>

<div class="sec">
    <div class="btn-group" role="group" aria-label="Basic example">
        <button class="btn btn-primary" @onclick="OpenNew">Open</button>
        <button class="btn btn-primary" @onclick="CreateNew">Save as New</button>
    </div>
</div>

<div class="sec">
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <button class="btn btn-@(boardMgr.IsSingleMode ? "success" : "warning")" type="button"
                    @onclick="@(() => {boardMgr.IsSingleMode = !boardMgr.IsSingleMode; OnChangeData(); })">
                @(boardMgr.IsSingleMode ? "Single" : "Game")
            </button>
            <button class="btn btn-@(boardMgr.IsWhite ? "outline-secondary" : "dark")" type="button"
                    @onclick="@(() => {boardMgr.IsWhite = !boardMgr.IsWhite; OnChangeData(); })">
                @(boardMgr.IsWhite ? "White" : "Black")
            </button>
        </div>
        <input type="number" class="form-control" placeholder="Left Time" aria-label="" aria-describedby="basic-addon1"
               @bind="boardMgr.TimeLeft" @onfocusout="OnChangeData" />
    </div>
</div>

<div class="halma-brushselect sec">
    <div class="halma-brush halma-clearp @(BrushType == 0 ? "halma-brush-chosen" : "")" @onclick="@((e) => this.BrushType = 0)">
    </div>
    <div class="halma-brush halma-whitep @(BrushType == 1 ? "halma-brush-chosen" : "")" @onclick="@((e) => this.BrushType = 1)">
    </div>
    <div class="halma-brush halma-blackp @(BrushType == 2 ? "halma-brush-chosen" : "")" @onclick="@((e) => this.BrushType = 2)">
    </div>
</div>

<div class="btn-group" role="group" aria-label="Basic example">
    <button class="btn btn-light" @onclick="@((e) => ClearTiles(0))">Clear All Pieces</button>
    <button class="btn btn-light" @onclick="@((e) => ClearTiles(1))">Clear White Pieces</button>
    <button class="btn btn-light" @onclick="@((e) => ClearTiles(2))">Clear Black Pieces</button>
</div>

<div class="row">
    <div class="col-sm-12">
        <span style="color: @((count.Item1 == 19) ? "green" : "red")">White: @count.Item1 pc</span>
        <br/>
        <span style="color: @((count.Item2 == 19) ? "green" : "red")">Black: @count.Item2 pc</span>
    </div>
</div>

<p>@test</p>

<table class="sec" @onkeydown="@((e) => test=e.Key )">
    @for (int i = 0; i < 16; i++)
    {
        <tr>
            @for (int j = 0; j < 16; j++)
            {
                var tilei = i;
                var tilej = j;
                <td>
                    <div class="halma-tile" @onclick="@((e) => SetTile(tilei, tilej))">
                        @if (boardMgr.Tiles[i, j] == 1)
                        {
                            <div class="halma-piece halma-whitep"></div>
                        }
                        else if (boardMgr.Tiles[i, j] == 2)
                        {
                            <div class="halma-piece halma-blackp"></div>
                        }
                    </div>
                </td>
            }
        </tr>
    }
</table>

@code {
    public int BrushType = 0;

    public (int, int) count;

    public string test;

    public string warning;

    void SetTile(int i, int j)
    {
        if (BrushType > 0)
            boardMgr.Tiles[i, j] = boardMgr.Tiles[i, j] == 0 ? this.BrushType : 0;
        else
            boardMgr.Tiles[i, j] = 0;
        OnChangeData();
    }

    void ClearTiles(int b)
    {
        for (int i = 0; i < 16; i++)
        {
            for (int j = 0; j < 16; j++)
            {
                if (b == boardMgr.Tiles[i, j] || b == 0)
                    boardMgr.Tiles[i, j] = 0;
            }
        }
        OnChangeData();
    }

    void ToggleTile(int i, int j)
    {
        boardMgr.Tiles[i, j] = (boardMgr.Tiles[i, j] + 1) % 3;
        OnChangeData();
    }

    void OpenNew()
    {
        boardMgr.DelinkFile();
        if (!boardMgr.OpenInput(boardMgr.FilePath))
        {
            warning = "Cannot open file";
            return;
        }
        warning = null;
        boardMgr.LinkedFilePath = boardMgr.FilePath;
        boardMgr.LinkFile();
        this.count = boardMgr.Count;
    }

    void Save()
    {
        boardMgr.DelinkFile();
        if (!boardMgr.SaveInput(boardMgr.LinkedFilePath))
        {
            warning = "Cannot save file";
            return;
        }
        warning = null;
        boardMgr.LinkFile();
    }

    void CreateNew()
    {
        boardMgr.DelinkFile();
        if (!boardMgr.SaveInput(boardMgr.FilePath))
        {
            warning = "Cannot save file";
            return;
        }
        warning = null;
        boardMgr.LinkedFilePath = boardMgr.FilePath;
        boardMgr.LinkFile();
    }

    protected override void OnInitialized()
    {
        Task.Run(() =>
        {
            while (true)
            {
                Task.Delay(1000).Wait();
                this.InvokeAsync(this.StateHasChanged);
            }
        });
        this.count = boardMgr.Count;
    }

    void OnChangeData()
    {
        if (boardMgr.LinkedFilePath != null)
        {
            Save();
        }
        this.count = boardMgr.Count;
    }
}
